/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.shc.androidopenal;

import java.nio.*;

public class STBVorbis {
  public static stb_vorbis_info stb_vorbis_get_info(SWIGTYPE_p_stb_vorbis f) {
    return new stb_vorbis_info(STBVorbisJNI.stb_vorbis_get_info(SWIGTYPE_p_stb_vorbis.getCPtr(f)), true);
  }

  public static int stb_vorbis_get_error(SWIGTYPE_p_stb_vorbis f) {
    return STBVorbisJNI.stb_vorbis_get_error(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static void stb_vorbis_close(SWIGTYPE_p_stb_vorbis f) {
    STBVorbisJNI.stb_vorbis_close(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static int stb_vorbis_get_sample_offset(SWIGTYPE_p_stb_vorbis f) {
    return STBVorbisJNI.stb_vorbis_get_sample_offset(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static long stb_vorbis_get_file_offset(SWIGTYPE_p_stb_vorbis f) {
    return STBVorbisJNI.stb_vorbis_get_file_offset(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static SWIGTYPE_p_stb_vorbis stb_vorbis_open_pushdata(ByteBuffer datablock, int datablock_length_in_bytes, IntBuffer datablock_memory_consumed_in_bytes, IntBuffer error, stb_vorbis_alloc alloc_buffer) {
    long cPtr = STBVorbisJNI.stb_vorbis_open_pushdata(Util.getAddress(datablock), datablock_length_in_bytes, Util.getAddress(datablock_memory_consumed_in_bytes), Util.getAddress(error), stb_vorbis_alloc.getCPtr(alloc_buffer), alloc_buffer);
    return (cPtr == 0) ? null : new SWIGTYPE_p_stb_vorbis(cPtr, false);
  }

  public static int stb_vorbis_decode_frame_pushdata(SWIGTYPE_p_stb_vorbis f, ByteBuffer datablock, int datablock_length_in_bytes, IntBuffer channels, SWIGTYPE_p_p_p_float output, IntBuffer samples) {
    return STBVorbisJNI.stb_vorbis_decode_frame_pushdata(SWIGTYPE_p_stb_vorbis.getCPtr(f), Util.getAddress(datablock), datablock_length_in_bytes, Util.getAddress(channels), SWIGTYPE_p_p_p_float.getCPtr(output), Util.getAddress(samples));
  }

  public static void stb_vorbis_flush_pushdata(SWIGTYPE_p_stb_vorbis f) {
    STBVorbisJNI.stb_vorbis_flush_pushdata(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static int stb_vorbis_decode_filename(String filename, IntBuffer channels, IntBuffer sample_rate, ShortBuffer output) {
    return STBVorbisJNI.stb_vorbis_decode_filename(filename, Util.getAddress(channels), Util.getAddress(sample_rate, 0), Util.getAddress(output));
  }

  public static int stb_vorbis_decode_memory(ByteBuffer mem, int len, IntBuffer channels, IntBuffer sample_rate, ShortBuffer output) {
    return STBVorbisJNI.stb_vorbis_decode_memory(Util.getAddress(mem), len, Util.getAddress(channels), Util.getAddress(sample_rate, 0), Util.getAddress(output));
  }

  public static SWIGTYPE_p_stb_vorbis stb_vorbis_open_memory(ByteBuffer data, int len, IntBuffer error, stb_vorbis_alloc alloc_buffer) {
    long cPtr = STBVorbisJNI.stb_vorbis_open_memory(Util.getAddress(data), len, Util.getAddress(error), stb_vorbis_alloc.getCPtr(alloc_buffer), alloc_buffer);
    return (cPtr == 0) ? null : new SWIGTYPE_p_stb_vorbis(cPtr, false);
  }

  public static SWIGTYPE_p_stb_vorbis stb_vorbis_open_filename(String filename, IntBuffer error, stb_vorbis_alloc alloc_buffer) {
    long cPtr = STBVorbisJNI.stb_vorbis_open_filename(filename, Util.getAddress(error), stb_vorbis_alloc.getCPtr(alloc_buffer), alloc_buffer);
    return (cPtr == 0) ? null : new SWIGTYPE_p_stb_vorbis(cPtr, false);
  }

  public static SWIGTYPE_p_stb_vorbis stb_vorbis_open_file(SWIGTYPE_p_FILE f, int close_handle_on_close, IntBuffer error, stb_vorbis_alloc alloc_buffer) {
    long cPtr = STBVorbisJNI.stb_vorbis_open_file(SWIGTYPE_p_FILE.getCPtr(f), close_handle_on_close, Util.getAddress(error), stb_vorbis_alloc.getCPtr(alloc_buffer), alloc_buffer);
    return (cPtr == 0) ? null : new SWIGTYPE_p_stb_vorbis(cPtr, false);
  }

  public static SWIGTYPE_p_stb_vorbis stb_vorbis_open_file_section(SWIGTYPE_p_FILE f, int close_handle_on_close, IntBuffer error, stb_vorbis_alloc alloc_buffer, long len) {
    long cPtr = STBVorbisJNI.stb_vorbis_open_file_section(SWIGTYPE_p_FILE.getCPtr(f), close_handle_on_close, Util.getAddress(error), stb_vorbis_alloc.getCPtr(alloc_buffer), alloc_buffer, len);
    return (cPtr == 0) ? null : new SWIGTYPE_p_stb_vorbis(cPtr, false);
  }

  public static int stb_vorbis_seek_frame(SWIGTYPE_p_stb_vorbis f, long sample_number) {
    return STBVorbisJNI.stb_vorbis_seek_frame(SWIGTYPE_p_stb_vorbis.getCPtr(f), sample_number);
  }

  public static int stb_vorbis_seek(SWIGTYPE_p_stb_vorbis f, long sample_number) {
    return STBVorbisJNI.stb_vorbis_seek(SWIGTYPE_p_stb_vorbis.getCPtr(f), sample_number);
  }

  public static void stb_vorbis_seek_start(SWIGTYPE_p_stb_vorbis f) {
    STBVorbisJNI.stb_vorbis_seek_start(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static long stb_vorbis_stream_length_in_samples(SWIGTYPE_p_stb_vorbis f) {
    return STBVorbisJNI.stb_vorbis_stream_length_in_samples(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static float stb_vorbis_stream_length_in_seconds(SWIGTYPE_p_stb_vorbis f) {
    return STBVorbisJNI.stb_vorbis_stream_length_in_seconds(SWIGTYPE_p_stb_vorbis.getCPtr(f));
  }

  public static int stb_vorbis_get_frame_float(SWIGTYPE_p_stb_vorbis f, IntBuffer channels, SWIGTYPE_p_p_p_float output) {
    return STBVorbisJNI.stb_vorbis_get_frame_float(SWIGTYPE_p_stb_vorbis.getCPtr(f), Util.getAddress(channels), SWIGTYPE_p_p_p_float.getCPtr(output));
  }

  public static int stb_vorbis_get_frame_short_interleaved(SWIGTYPE_p_stb_vorbis f, int num_c, SWIGTYPE_p_short buffer, int num_shorts) {
    return STBVorbisJNI.stb_vorbis_get_frame_short_interleaved(SWIGTYPE_p_stb_vorbis.getCPtr(f), num_c, SWIGTYPE_p_short.getCPtr(buffer), num_shorts);
  }

  public static int stb_vorbis_get_frame_short(SWIGTYPE_p_stb_vorbis f, int num_c, ShortBuffer buffer, int num_samples) {
    return STBVorbisJNI.stb_vorbis_get_frame_short(SWIGTYPE_p_stb_vorbis.getCPtr(f), num_c, Util.getAddress(buffer, 0), num_samples);
  }

  public static int stb_vorbis_get_samples_float_interleaved(SWIGTYPE_p_stb_vorbis f, int channels, FloatBuffer buffer, int num_floats) {
    return STBVorbisJNI.stb_vorbis_get_samples_float_interleaved(SWIGTYPE_p_stb_vorbis.getCPtr(f), channels, Util.getAddress(buffer), num_floats);
  }

  public static int stb_vorbis_get_samples_float(SWIGTYPE_p_stb_vorbis f, int channels, FloatBuffer buffer, int num_samples) {
    return STBVorbisJNI.stb_vorbis_get_samples_float(SWIGTYPE_p_stb_vorbis.getCPtr(f), channels, Util.getAddress(buffer), num_samples);
  }

  public static int stb_vorbis_get_samples_short_interleaved(SWIGTYPE_p_stb_vorbis f, int channels, SWIGTYPE_p_short buffer, int num_shorts) {
    return STBVorbisJNI.stb_vorbis_get_samples_short_interleaved(SWIGTYPE_p_stb_vorbis.getCPtr(f), channels, SWIGTYPE_p_short.getCPtr(buffer), num_shorts);
  }

  public static int stb_vorbis_get_samples_short(SWIGTYPE_p_stb_vorbis f, int channels, ShortBuffer buffer, int num_samples) {
    return STBVorbisJNI.stb_vorbis_get_samples_short(SWIGTYPE_p_stb_vorbis.getCPtr(f), channels, Util.getAddress(buffer, 0), num_samples);
  }

}
